{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MSDS458_Assignment_03_LSTM_E.pynb","provenance":[{"file_id":"1mCovGhXRp-2c8m0NZitutkm8H6gOxqnw","timestamp":1636262446115},{"file_id":"1GGhgHSY0BoWQRl6deaWJrSRP96z4aSeg","timestamp":1636259852809},{"file_id":"1FZf7-AV12lSlDjyqJXv8uOC3bWHLBfKM","timestamp":1636259786666},{"file_id":"1gI0O9S3Pdxc7OgIa8LmCJ17GjW_om5q3","timestamp":1636212919442},{"file_id":"https://github.com/djp840/MSDS_458_Public/blob/master/msds458_assignment_03/MSDS458_Assignment_03_20210920_v20.ipynb","timestamp":1636137192502}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":false,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Cfh9kVB-rpjo"},"source":["<img src=\"https://github.com/djp840/MSDS_458_Public/blob/master/images/NorthwesternHeader.png?raw=1\">"]},{"cell_type":"markdown","metadata":{"id":"pRAx1f1ir1St"},"source":["## MSDS458 Research Assignment 3"]},{"cell_type":"markdown","metadata":{"id":"jQnyR1_aFk-t"},"source":["### Analyze AG_NEWS_SUBSET Data <br>\n","\n","AG is a collection of more than 1 million news articles. News articles have been gathered from more than 2000 news sources by ComeToMyHead in more than 1 year of activity. ComeToMyHead is an academic news search engine which has been running since July, 2004. The dataset is provided by the academic comunity for research purposes in data mining (clustering, classification, etc), information retrieval (ranking, search, etc), xml, data compression, data streaming, and any other non-commercial activity.<br> \n","\n","For more information, please refer to the link http://www.di.unipi.it/~gulli/AG_corpus_of_news_articles.html<br> \n","\n","\n","The AG's news topic classification dataset is constructed by choosing 4 largest classes (**World**, **Sports**, **Business**, and **Sci/Tech**) from the original corpus. Each class contains 30,000 training samples and 1,900 testing samples. The total number of training samples is 120,000 and testing 7,600.<br>\n","\n","Homepage: https://arxiv.org/abs/1509.01626<br>\n","\n","Source code: tfds.text.AGNewsSubset\n","\n","Versions:\n","\n","1.0.0 (default): No release notes.\n","Download size: 11.24 MiB\n","\n","Dataset size: 35.79 MiB"]},{"cell_type":"markdown","metadata":{"id":"oGBlk-2-NaCn"},"source":["<div class=\"alert alert-block alert-success\">\n","    <b>More Technical</b>: Throughout the notebook. This types of boxes provide more technical details and extra references about what you are seeing. They contain helpful tips, but you can safely skip them the first time you run through the code.\n","</div>"]},{"cell_type":"markdown","metadata":{"id":"t-Jjr3rNr5PR"},"source":["## Import packages "]},{"cell_type":"code","metadata":{"id":"mbrX9qUZvfs1"},"source":["import datetime\n","from packaging import version\n","from collections import Counter\n","import numpy as np\n","import pandas as pd\n","import time\n","\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import seaborn as sns\n","\n","from sklearn.metrics import confusion_matrix, classification_report\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from sklearn.manifold import TSNE\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import mean_squared_error as MSE\n","from sklearn.metrics import accuracy_score\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","import tensorflow_datasets as tfds"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Rn-mj2I3yRRJ"},"source":["#tf.get_logger().setLevel('INFO')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q0H8HuzHrWwN"},"source":["%matplotlib inline\n","np.set_printoptions(precision=3, suppress=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iKucNfkrsqrP"},"source":["### Verify TensorFlow Version and Keras Version"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g_BoGg9JrWzj","executionInfo":{"status":"ok","timestamp":1636277320311,"user_tz":360,"elapsed":7,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"6d4abbe7-c6f9-40da-9c3e-c4db5745e2b7"},"source":["print(\"This notebook requires TensorFlow 2.0 or above\")\n","print(\"TensorFlow version: \", tf.__version__)\n","assert version.parse(tf.__version__).release[0] >=2"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This notebook requires TensorFlow 2.0 or above\n","TensorFlow version:  2.6.0\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U_bLWHP4rW3b","executionInfo":{"status":"ok","timestamp":1636277320831,"user_tz":360,"elapsed":524,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"105954a5-3a82-4d62-fce6-a5d60e218e16"},"source":["print(\"Keras version: \", keras.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Keras version:  2.6.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"TO-PyWIcYC-F"},"source":["### Functions For Research Assignment "]},{"cell_type":"code","metadata":{"id":"yfocbIpdYC-G"},"source":["def print_validation_report(test_labels, predictions):\n","    print(\"Classification Report\")\n","    print(classification_report(test_labels, predictions))\n","    print('Accuracy Score: {}'.format(accuracy_score(test_labels, predictions)))\n","    print('Root Mean Square Error: {}'.format(np.sqrt(MSE(test_labels, predictions)))) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UO7bpVjLYC-G"},"source":["def plot_confusion_matrix(y_true, y_pred):\n","    mtx = confusion_matrix(y_true, y_pred)\n","    fig, ax = plt.subplots(figsize=(8,8))\n","    sns.heatmap(mtx, annot=True, fmt='d', linewidths=.75,  cbar=False, ax=ax,cmap='Blues',linecolor='white')\n","    #  square=True,\n","    plt.ylabel('true label')\n","    plt.xlabel('predicted label')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AxTCu1ocYC-G"},"source":["def plot_graphs(history, metric):\n","  plt.plot(history.history[metric])\n","  plt.plot(history.history['val_'+metric], '')\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(metric)\n","  plt.legend([metric, 'val_'+metric])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-mFyXjJmtJ3E"},"source":["### Mount Google Drive to Colab Environment"]},{"cell_type":"code","metadata":{"id":"CXm3H81YrW8-"},"source":["#from google.colab import drive\n","#drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"X6s4xhh5ysp6"},"source":["###  TensorFlow Datasets Information<br>\n","<div class=\"alert alert-block alert-info\">\n","    <b> ag_news_subset</b><br>\n","    See https://www.tensorflow.org/datasets/catalog/ag_news_subset\n","    </div>"]},{"cell_type":"markdown","metadata":{"id":"cL3ewSkAF4yF"},"source":["Get all the words in the documents (as well as the number of words in each document) by using the encoder to get the indices associated with each token and then translating the indices to tokens. But first we need to get the \"unpadded\" new articles so that we can get their length."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VNj2HSxNtTNS","scrolled":false,"executionInfo":{"status":"ok","timestamp":1636277378071,"user_tz":360,"elapsed":57243,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"90d7489d-8df7-4418-e12a-fb17e7f25d56"},"source":["#register  ag_news_subset so that tfds.load doesn't generate a checksum (mismatch) error\n","!python -m tensorflow_datasets.scripts.download_and_prepare --register_checksums --datasets=ag_news_subset\n","\n","# https://www.tensorflow.org/datasets/splits\n","# The full `train` and `test` splits, interleaved together.\n","ri = tfds.core.ReadInstruction('train') + tfds.core.ReadInstruction('test')\n","dataset_all, info = tfds.load('ag_news_subset', with_info=True,  split=ri, as_supervised=True)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-07 09:28:41.770738: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2021-11-07 09:28:41.978474: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2021-11-07 09:28:41.979545: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","I1107 09:28:41.980665 140172289595264 download_and_prepare.py:200] Running download_and_prepare for dataset(s):\n","ag_news_subset\n","2021-11-07 09:28:42.003223: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","2021-11-07 09:28:42.092861: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","2021-11-07 09:28:42.170414: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","I1107 09:28:42.253394 140172289595264 dataset_info.py:434] Load pre-computed DatasetInfo (eg: splits, num examples,...) from GCS: ag_news_subset/1.0.0\n","2021-11-07 09:28:42.262579: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","2021-11-07 09:28:42.357209: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","I1107 09:28:42.539614 140172289595264 dataset_info.py:361] Load dataset info from /tmp/tmpemcm49gktfds\n","I1107 09:28:42.543992 140172289595264 download_and_prepare.py:138] download_and_prepare for dataset ag_news_subset/1.0.0...\n","I1107 09:28:42.544654 140172289595264 dataset_builder.py:357] Generating dataset ag_news_subset (/root/tensorflow_datasets/ag_news_subset/1.0.0)\n","\u001b[1mDownloading and preparing dataset ag_news_subset/1.0.0 (download: 11.24 MiB, generated: 35.79 MiB, total: 47.03 MiB) to /root/tensorflow_datasets/ag_news_subset/1.0.0...\u001b[0m\n","2021-11-07 09:28:42.727928: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","2021-11-07 09:28:42.791693: I tensorflow/core/platform/cloud/google_auth_provider.cc:180] Attempting an empty bearer token since no token was retrieved from files, and GCE metadata check was skipped.\n","Dl Completed...: 0 url [00:00, ? url/s]\n","Dl Size...: 0 MiB [00:00, ? MiB/s]\u001b[A\n","\n","Extraction completed...: 0 file [00:00, ? file/s]\u001b[A\u001b[AI1107 09:28:42.873402 140172289595264 download_manager.py:476] Downloading https://drive.google.com/uc?export=download&id=0Bz8a_Dbh9QhbUDNpeUdjb0wxRms into /root/tensorflow_datasets/downloads/ucexport_download_id_0Bz8a_Dbh9QhbUDNpeUdjb0wxj4g1umFAV8OV-uDwxSJR0LdxO_k1jxMuFWwAfNX9jos.tmp.8485238a91ef40a4a3214090b0922253...\n","Dl Completed...:   0% 0/1 [00:00<?, ? url/s]\n","Dl Size...: 0 MiB [00:00, ? MiB/s]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:   0% 0/11 [00:12<?, ? MiB/s]\u001b[A\n","\n","Extraction completed...: 0 file [00:12, ? file/s]\u001b[A\u001b[A\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:   9% 1/11 [00:12<02:02, 12.20s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  18% 2/11 [00:12<01:49, 12.20s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  27% 3/11 [00:12<01:37, 12.20s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  36% 4/11 [00:12<01:25, 12.20s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  45% 5/11 [00:12<01:13, 12.20s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  55% 6/11 [00:12<01:01, 12.20s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  64% 7/11 [00:12<00:48, 12.20s/ MiB]\u001b[A\n","\n","Extraction completed...: 0 file [00:12, ? file/s]\u001b[A\u001b[A\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  73% 8/11 [00:12<00:03,  1.12s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  82% 9/11 [00:12<00:02,  1.12s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...:  91% 10/11 [00:12<00:01,  1.12s/ MiB]\u001b[A\n","\n","Dl Completed...:   0% 0/1 [00:12<?, ? url/s]\n","Dl Size...: 100% 11/11 [00:12<00:00,  1.12s/ MiB]\u001b[A\n","\n","Dl Completed...: 100% 1/1 [00:12<00:00, 12.36s/ url]\n","Dl Size...: 100% 11/11 [00:12<00:00,  1.12s/ MiB]\u001b[A\n","\n","Dl Completed...: 100% 1/1 [00:12<00:00, 12.36s/ url]\n","Dl Size...: 100% 11/11 [00:12<00:00,  1.12s/ MiB]\u001b[A\n","\n","Extraction completed...:   0% 0/1 [00:12<?, ? file/s]\u001b[A\u001b[A\n","\n","Dl Completed...: 100% 1/1 [00:12<00:00, 12.36s/ url]\n","Dl Size...: 100% 11/11 [00:12<00:00,  1.12s/ MiB]\u001b[A\n","\n","Extraction completed...: 100% 1/1 [00:12<00:00, 12.77s/ file]\u001b[A\u001b[A\n","Extraction completed...: 100% 1/1 [00:12<00:00, 12.77s/ file]\n","\n","Dl Size...: 100% 11/11 [00:12<00:00,  1.16s/ MiB]\n","\n","Dl Completed...: 100% 1/1 [00:12<00:00, 12.77s/ url]\n","I1107 09:28:55.641273 140172289595264 dataset_builder.py:970] Generating split train\n","Shuffling and writing examples to /root/tensorflow_datasets/ag_news_subset/1.0.0.incomplete8BB2RS/ag_news_subset-train.tfrecord\n"," 99% 119284/120000 [00:00<00:00, 333978.78 examples/s]I1107 09:29:29.770209 140172289595264 tfrecords_writer.py:226] Done writing /root/tensorflow_datasets/ag_news_subset/1.0.0.incomplete8BB2RS/ag_news_subset-train.tfrecord. Shard lengths: [120000]\n","I1107 09:29:29.788997 140172289595264 dataset_builder.py:970] Generating split test\n","Shuffling and writing examples to /root/tensorflow_datasets/ag_news_subset/1.0.0.incomplete8BB2RS/ag_news_subset-test.tfrecord\n","  0% 0/7600 [00:00<?, ? examples/s]I1107 09:29:31.878075 140172289595264 tfrecords_writer.py:226] Done writing /root/tensorflow_datasets/ag_news_subset/1.0.0.incomplete8BB2RS/ag_news_subset-test.tfrecord. Shard lengths: [7600]\n","I1107 09:29:31.879886 140172289595264 dataset_builder.py:412] Skipping computing stats for mode ComputeStatsMode.SKIP.\n","\u001b[1mDataset ag_news_subset downloaded and prepared to /root/tensorflow_datasets/ag_news_subset/1.0.0. Subsequent calls will reuse this data.\u001b[0m\n","\u001b[1mname: \"ag_news_subset\"\n","description: \"AG is a collection of more than 1 million news articles.\\nNews articles have been gathered from more than 2000  news sources by ComeToMyHead in more than 1 year of activity.\\nComeToMyHead is an academic news search engine which has been running since July, 2004.\\nThe dataset is provided by the academic comunity for research purposes in data mining (clustering, classification, etc),\\ninformation retrieval (ranking, search, etc), xml, data compression, data streaming,\\nand any other non-commercial activity.\\nFor more information, please refer to the link http://www.di.unipi.it/~gulli/AG_corpus_of_news_articles.html .\\n\\nThe AG\\'s news topic classification dataset is constructed by Xiang Zhang (xiang.zhang@nyu.edu) from the dataset above.\\nIt is used as a text classification benchmark in the following paper:\\nXiang Zhang, Junbo Zhao, Yann LeCun. Character-level Convolutional Networks for Text Classification. Advances in Neural Information Processing Systems 28 (NIPS 2015).\\n\\nThe AG\\'s news topic classification dataset is constructed by choosing 4 largest classes from the original corpus.\\nEach class contains 30,000 training samples and 1,900 testing samples.\\nThe total number of training samples is 120,000 and testing 7,600.\"\n","citation: \"@misc{zhang2015characterlevel,\\n    title={Character-level Convolutional Networks for Text Classification},\\n    author={Xiang Zhang and Junbo Zhao and Yann LeCun},\\n    year={2015},\\n    eprint={1509.01626},\\n    archivePrefix={arXiv},\\n    primaryClass={cs.LG}\\n}\"\n","location {\n","  urls: \"https://arxiv.org/abs/1509.01626\"\n","}\n","splits {\n","  name: \"test\"\n","  shard_lengths: 7600\n","  num_bytes: 2226751\n","}\n","splits {\n","  name: \"train\"\n","  shard_lengths: 120000\n","  num_bytes: 35301386\n","}\n","supervised_keys {\n","  input: \"description\"\n","  output: \"label\"\n","}\n","version: \"1.0.0\"\n","download_size: 11784327\n","\u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"Bzs2FWbQIf5m"},"source":["###  Exploratory Analysis AG News Subset"]},{"cell_type":"markdown","metadata":{"id":"m7514-j4I4B-"},"source":["**Get information about the ag_news_subset dataset. We combined the training and test data for a total of 127,600 news articles.**"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eJNcnZbRtTQ2","executionInfo":{"status":"ok","timestamp":1636277378072,"user_tz":360,"elapsed":14,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"8e777d3f-758b-4e7e-a7b4-ee30a824d403"},"source":["print(info)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tfds.core.DatasetInfo(\n","    name='ag_news_subset',\n","    version=1.0.0,\n","    description='AG is a collection of more than 1 million news articles.\n","News articles have been gathered from more than 2000  news sources by ComeToMyHead in more than 1 year of activity.\n","ComeToMyHead is an academic news search engine which has been running since July, 2004.\n","The dataset is provided by the academic comunity for research purposes in data mining (clustering, classification, etc),\n","information retrieval (ranking, search, etc), xml, data compression, data streaming,\n","and any other non-commercial activity.\n","For more information, please refer to the link http://www.di.unipi.it/~gulli/AG_corpus_of_news_articles.html .\n","\n","The AG's news topic classification dataset is constructed by Xiang Zhang (xiang.zhang@nyu.edu) from the dataset above.\n","It is used as a text classification benchmark in the following paper:\n","Xiang Zhang, Junbo Zhao, Yann LeCun. Character-level Convolutional Networks for Text Classification. Advances in Neural Information Processing Systems 28 (NIPS 2015).\n","\n","The AG's news topic classification dataset is constructed by choosing 4 largest classes from the original corpus.\n","Each class contains 30,000 training samples and 1,900 testing samples.\n","The total number of training samples is 120,000 and testing 7,600.',\n","    homepage='https://arxiv.org/abs/1509.01626',\n","    features=FeaturesDict({\n","        'description': Text(shape=(), dtype=tf.string),\n","        'label': ClassLabel(shape=(), dtype=tf.int64, num_classes=4),\n","        'title': Text(shape=(), dtype=tf.string),\n","    }),\n","    total_num_examples=127600,\n","    splits={\n","        'test': 7600,\n","        'train': 120000,\n","    },\n","    supervised_keys=('description', 'label'),\n","    citation=\"\"\"@misc{zhang2015characterlevel,\n","        title={Character-level Convolutional Networks for Text Classification},\n","        author={Xiang Zhang and Junbo Zhao and Yann LeCun},\n","        year={2015},\n","        eprint={1509.01626},\n","        archivePrefix={arXiv},\n","        primaryClass={cs.LG}\n","    }\"\"\",\n","    redistribution_info=,\n",")\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":251},"id":"w6GaSzMRqrIR","executionInfo":{"status":"ok","timestamp":1636277378281,"user_tz":360,"elapsed":215,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"1ebbab12-057a-4ba8-83e1-34350cbb71a7"},"source":["tfds.as_dataframe(dataset_all.take(10),info)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<style  type=\"text/css\" >\n","</style><table id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >description</th>        <th class=\"col_heading level0 col1\" >label</th>    </tr></thead><tbody>\n","                <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >0</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row0_col0\" class=\"data row0 col0\" >AMD #39;s new dual-core Opteron chip is designed mainly for corporate computing applications, including databases, Web services, and financial transactions.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row0_col1\" class=\"data row0 col1\" >3 (Sci/Tech)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >1</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row1_col0\" class=\"data row1 col0\" >Reuters - Major League Baseball\\Monday announced a decision on the appeal filed by Chicago Cubs\\pitcher Kerry Wood regarding a suspension stemming from an\\incident earlier this season.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row1_col1\" class=\"data row1 col1\" >1 (Sports)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >2</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row2_col0\" class=\"data row2 col0\" >President Bush #39;s quot;revenue-neutral quot; tax reform needs losers to balance its winners, and people claiming the federal deduction for state and local taxes may be in administration planners #39; sights, news reports say.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row2_col1\" class=\"data row2 col1\" >2 (Business)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >3</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row3_col0\" class=\"data row3 col0\" >Britain will run out of leading scientists unless science education is improved, says Professor Colin Pillinger.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row3_col1\" class=\"data row3 col1\" >3 (Sci/Tech)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >4</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row4_col0\" class=\"data row4 col0\" >London, England (Sports Network) - England midfielder Steven Gerrard injured his groin late in Thursday #39;s training session, but is hopeful he will be ready for Saturday #39;s World Cup qualifier against Austria.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row4_col1\" class=\"data row4 col1\" >1 (Sports)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >5</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row5_col0\" class=\"data row5 col0\" >TOKYO - Sony Corp. is banking on the \\$3 billion deal to acquire Hollywood studio Metro-Goldwyn-Mayer Inc...</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row5_col1\" class=\"data row5 col1\" >0 (World)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >6</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row6_col0\" class=\"data row6 col0\" >Giant pandas may well prefer bamboo to laptops, but wireless technology is helping researchers in China in their efforts to protect the engandered animals living in the remote Wolong Nature Reserve.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row6_col1\" class=\"data row6 col1\" >3 (Sci/Tech)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >7</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row7_col0\" class=\"data row7 col0\" >VILNIUS, Lithuania - Lithuania #39;s main parties formed an alliance to try to keep a Russian-born tycoon and his populist promises out of the government in Sunday #39;s second round of parliamentary elections in this Baltic country.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row7_col1\" class=\"data row7 col1\" >0 (World)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >8</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row8_col0\" class=\"data row8 col0\" >Witnesses in the trial of a US soldier charged with abusing prisoners at Abu Ghraib have told the court that the CIA sometimes directed abuse and orders were received from military command to toughen interrogations.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row8_col1\" class=\"data row8 col1\" >0 (World)</td>\n","            </tr>\n","            <tr>\n","                        <th id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >9</th>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row9_col0\" class=\"data row9 col0\" >Dan Olsen of Ponte Vedra Beach, Fla., shot a 7-under 65 Thursday to take a one-shot lead after two rounds of the PGA Tour qualifying tournament.</td>\n","                        <td id=\"T_391580ba_3fad_11ec_b4d8_0242ac1c0002row9_col1\" class=\"data row9 col1\" >1 (Sports)</td>\n","            </tr>\n","    </tbody></table>"],"text/plain":["                                         description  label\n","0  b'AMD #39;s new dual-core Opteron chip is desi...      3\n","1  b'Reuters - Major League Baseball\\\\Monday anno...      1\n","2  b'President Bush #39;s  quot;revenue-neutral q...      2\n","3  b'Britain will run out of leading scientists u...      3\n","4  b'London, England (Sports Network) - England m...      1\n","5  b'TOKYO - Sony Corp. is banking on the \\\\$3 bi...      0\n","6  b'Giant pandas may well prefer bamboo to lapto...      3\n","7  b'VILNIUS, Lithuania - Lithuania #39;s main pa...      0\n","8  b'Witnesses in the trial of a US soldier charg...      0\n","9  b'Dan Olsen of Ponte Vedra Beach, Fla., shot a...      1"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"uaIa09rNIKyA"},"source":["# pip install nltk"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DBpqSLHDIE0S"},"source":["\n","# import nltk\n","# nltk.download('stopwords')\n","# from nltk.corpus import stopwords\n","# stop_words= set(stopwords.words('english'))\n","\n","\n","# encoder = tf.keras.layers.experimental.preprocessing.TextVectorization(max_tokens=None)\n","# encoder.adapt(dataset_all.map(lambda text, label: text))\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uhy1MLimWM19"},"source":["# stop_words= stopwords.words('english')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U4cIAdasKd5T"},"source":["# import re\n","# import string\n","# def normlize(text):\n","#   remove_regex = f'[{re.escape(string.punctuation)}]'\n","#   space_regex = '...'\n","#   result = tf.strings.lower(text)\n","#   result = tf.strings.regex_replace(result, remove_regex, '')\n","#   result = tf.strings.regex_replace(result , stop_words, '')\n","#   return result"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LCQXf59XP2GR"},"source":["# encoder = tf.keras.layers.experimental.preprocessing.TextVectorization(max_tokens=None, standardize= normlize)\n","# encoder.adapt(dataset_all.map(lambda text, label: text))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i2AFh-w-cmGx"},"source":["# vocab = np.array(encoder.get_vocabulary())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aEPOPb63RNjv"},"source":["### Preprocessing Data Create Input Pipeline"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0_tU6cH0ncl0","executionInfo":{"status":"ok","timestamp":1636277382086,"user_tz":360,"elapsed":3813,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"8312244c-56c2-454f-be04-a7e38d914a0b"},"source":["# register  ag_news_subset so that tfds.load doesn't generate a checksum (mismatch) error\n","!python -m tensorflow_datasets.scripts.download_and_prepare --register_checksums --datasets=ag_news_subset\n","\n","# Example Approaches to Split Data Set\n","# dataset, info = tfds.load('ag_news_subset', with_info=True,  split=['train[:]','test[:1000]', 'test[1000:]'],\n","dataset, info = tfds.load('ag_news_subset', with_info=True,  split=['train[:95%]','train[95%:]', 'test[:]'],\n","# dataset, info = tfds.load('ag_news_subset', with_info=True,  split=['train[:114000]','train[114000:]', 'test[:]'],\n","                          as_supervised=True)\n","train_dataset, validation_dataset, test_dataset = dataset\n","# train_dataset, test_dataset = dataset['train'],dataset['test']"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2021-11-07 09:29:39.259777: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2021-11-07 09:29:39.269629: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","2021-11-07 09:29:39.270757: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero\n","I1107 09:29:39.272074 139768481195904 download_and_prepare.py:200] Running download_and_prepare for dataset(s):\n","ag_news_subset\n","I1107 09:29:39.275787 139768481195904 dataset_info.py:361] Load dataset info from /root/tensorflow_datasets/ag_news_subset/1.0.0\n","I1107 09:29:39.278867 139768481195904 download_and_prepare.py:138] download_and_prepare for dataset ag_news_subset/1.0.0...\n","I1107 09:29:39.279301 139768481195904 dataset_builder.py:299] Reusing dataset ag_news_subset (/root/tensorflow_datasets/ag_news_subset/1.0.0)\n","\u001b[1mname: \"ag_news_subset\"\n","description: \"AG is a collection of more than 1 million news articles.\\nNews articles have been gathered from more than 2000  news sources by ComeToMyHead in more than 1 year of activity.\\nComeToMyHead is an academic news search engine which has been running since July, 2004.\\nThe dataset is provided by the academic comunity for research purposes in data mining (clustering, classification, etc),\\ninformation retrieval (ranking, search, etc), xml, data compression, data streaming,\\nand any other non-commercial activity.\\nFor more information, please refer to the link http://www.di.unipi.it/~gulli/AG_corpus_of_news_articles.html .\\n\\nThe AG\\'s news topic classification dataset is constructed by Xiang Zhang (xiang.zhang@nyu.edu) from the dataset above.\\nIt is used as a text classification benchmark in the following paper:\\nXiang Zhang, Junbo Zhao, Yann LeCun. Character-level Convolutional Networks for Text Classification. Advances in Neural Information Processing Systems 28 (NIPS 2015).\\n\\nThe AG\\'s news topic classification dataset is constructed by choosing 4 largest classes from the original corpus.\\nEach class contains 30,000 training samples and 1,900 testing samples.\\nThe total number of training samples is 120,000 and testing 7,600.\"\n","citation: \"@misc{zhang2015characterlevel,\\n    title={Character-level Convolutional Networks for Text Classification},\\n    author={Xiang Zhang and Junbo Zhao and Yann LeCun},\\n    year={2015},\\n    eprint={1509.01626},\\n    archivePrefix={arXiv},\\n    primaryClass={cs.LG}\\n}\"\n","location {\n","  urls: \"https://arxiv.org/abs/1509.01626\"\n","}\n","splits {\n","  name: \"test\"\n","  shard_lengths: 7600\n","  num_bytes: 2226751\n","}\n","splits {\n","  name: \"train\"\n","  shard_lengths: 120000\n","  num_bytes: 35301386\n","}\n","supervised_keys {\n","  input: \"description\"\n","  output: \"label\"\n","}\n","version: \"1.0.0\"\n","download_size: 11784327\n","\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"bRc-UUujdLD6"},"source":["####  Dataset Splits (Training, Test, Validation)\n","#### .8934 Training, .0470 Test, .0596 Validation"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3TXXMh7Hdr47","executionInfo":{"status":"ok","timestamp":1636277382086,"user_tz":360,"elapsed":5,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"6f34f253-6c1e-4ee4-f52f-e2c31900edcd"},"source":["len(train_dataset),len(validation_dataset),len(test_dataset) \n","# len(train_dataset),len(test_dataset) "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(114000, 6000, 7600)"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"e3ISb8oinPnR"},"source":["### Review Distribution of Categorical Labels for the 114000 training data (news articles)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_qB-Y63QfW11","executionInfo":{"status":"ok","timestamp":1636277382087,"user_tz":360,"elapsed":4,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"507500d0-f088-492f-e18a-d2ecf99b7178"},"source":["# classes dictionary\n","categories =dict(enumerate(info.features[\"label\"].names))\n","categories"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 'World', 1: 'Sports', 2: 'Business', 3: 'Sci/Tech'}"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"Itjr5Erroxv9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277423143,"user_tz":360,"elapsed":41059,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"b5db7c9f-c357-44b7-f64d-9e8ad5d9efb4"},"source":["from collections import Counter\n","train_categories = [categories[label] for label in train_dataset.map(lambda text, label: label).as_numpy_iterator()]\n","Counter(train_categories).most_common()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('Business', 28531), ('Sports', 28495), ('World', 28491), ('Sci/Tech', 28483)]"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"nWA4c2ir7g6p"},"source":["Review Example with Interger Label(text, label pairs):"]},{"cell_type":"markdown","metadata":{"id":"icCNaXSirCnm"},"source":["Review Example with Interger Label Encoded Classification(text, label pairs):"]},{"cell_type":"code","metadata":{"id":"g469sP9PYbQT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277423143,"user_tz":360,"elapsed":10,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"a34d584d-f700-45c3-ba03-c236ef7cc679"},"source":["for example, label in train_dataset.take(1):\n","  print('text: ', example.numpy())\n","  print('class: ', categories[label.numpy()])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["text:  b'AMD #39;s new dual-core Opteron chip is designed mainly for corporate computing applications, including databases, Web services, and financial transactions.'\n","class:  Sci/Tech\n"]}]},{"cell_type":"markdown","metadata":{"id":"z2qVJzcEluH_"},"source":["#### Preprocessing Shuffle Data for Training and Create Batches of `(text, label)` pairs:"]},{"cell_type":"code","metadata":{"id":"dDsCaZCDYZgm"},"source":["BUFFER_SIZE = 10000\n","BATCH_SIZE = 32"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VznrltNOnUc5"},"source":["train_dataset = train_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)\n","validation_dataset = validation_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)\n","test_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jqkvdcFv41wC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277423538,"user_tz":360,"elapsed":403,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"e8bc823f-285f-48b2-dd46-a86229258d37"},"source":["for example, label in train_dataset.take(2):\n","  print('texts: ', example.numpy()[:3])\n","  print()\n","  print('labels: ', label.numpy()[:3])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["texts:  [b'Most, if not all, of you have read or been in heated debates over why or why not higher clocked microprocessors are better than their  quot;comparable quot; competition.'\n"," b'Citigroup, the world #39;s biggest bank, yesterday issued an humiliating apology to its staff after a bond trading coup in August that sparked investigations by regulators across Europe.'\n"," b'(CP) - NHL commissioner Gary Bettman spent part of his afternoon Wednesday answering questions from fans about the league #39;s lockout rather than preparing for opening night.']\n","\n","labels:  [3 2 1]\n","texts:  [b'The Fed chairman delivers a modestly upbeat prognosis that may signal an interest rate increase before Election Day. BY JEANNINE AVERSA.'\n"," b'Coming into this middleweight title bout, which turned out to be more mega-event than mega-fight, Oscar De La Hoya called Bernard Hopkins a bully.'\n"," b\"Reuters - American International Group Inc., the\\\\world's largest insurer by market value, said on Thursday it\\\\was the target of a federal grand jury investigation into\\\\products that prosecutors say were concocted to help companies\\\\manage their earnings.\"]\n","\n","labels:  [2 1 2]\n"]}]},{"cell_type":"code","metadata":{"id":"HQ_8Srl7Yi2Y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277423738,"user_tz":360,"elapsed":204,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"868a3f88-7425-481f-b7c3-57bfc67c9de6"},"source":["for example, label in train_dataset.take(2):\n","  print('texts: ', example.numpy()[:3])\n","  print()\n","  print('labels: ', [categories[n] for n in label.numpy()[:3]])\n","  print()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["texts:  [b'DALLAS - As Americans get older and fatter, the number of adults with high blood pressure has climbed to almost one in three over the past decade, putting more people at risk of a stroke, heart attack or kidney failure, government researchers said Monday.    A little more than a decade ago, the number was closer to one in four...'\n"," b'ATHENS (Reuters) - An angry Yao Ming took his frustrations out on New Zealand at the Olympic men #39;s basketball tournament on Tuesday, pouring in 39 points as China beat the Kiwis 69-62. '\n"," b'KATHMANDU: Nepali troops killed at least 21 Maoist rebels and lost 13 soldiers in gunbattles across the Himalayan kingdom, officials said yesterday.']\n","\n","labels:  ['World', 'Sports', 'World']\n","\n","texts:  [b'Nascar will allow liquor companies as sponsors for its Nextel Cup and other stock-car racing next season, ending a 30-year ban and creating a new funding source for racing teams.'\n"," b'United States cellphone operators are flirting with selling handsets that feature their names exclusively.'\n"," b'AP - European negotiators resume talks with Iran on Wednesday on a last-chance offer of incentives aimed at getting the Tehran regime to stop enriching uranium and avoid the threat of possible U.N. sanctions.']\n","\n","labels:  ['Sports', 'Sci/Tech', 'World']\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"s5eWCo88voPY"},"source":["## Create the Text Encoder"]},{"cell_type":"markdown","metadata":{"id":"TFevcItw15P_"},"source":["The raw text loaded by `tfds` needs to be processed before it can be used in a model. The simplest way to process text for training is using the `experimental.preprocessing.TextVectorization` layer. This layer has many capabilities, but this tutorial sticks to the default behavior."]},{"cell_type":"markdown","metadata":{"id":"UalGMKAzyRRf"},"source":["Create the layer, and pass the dataset's text to the layer's `.adapt` method:\n","The processing of each sample contains the following steps:\n","\n","    standardize each sample (usually lowercasing + punctuation stripping)\n","    split each sample into substrings (usually words)\n","    recombine substrings into tokens (usually ngrams)\n","    index tokens (associate a unique int value with each token)\n","    transform each sample using this index, either into a vector of ints or a dense float vector.\n"]},{"cell_type":"markdown","metadata":{"id":"BLaLcPcXsY95"},"source":["The `.adapt` method sets the layer's vocabulary. Here are the first 20 tokens. After the padding and unknown tokens they're sorted by frequency: "]},{"cell_type":"code","metadata":{"id":"uC25Lu1Yvuqy"},"source":["VOCAB_SIZE=1000\n","encoder = tf.keras.layers.experimental.preprocessing.TextVectorization(\n","    max_tokens=VOCAB_SIZE, output_sequence_length= 60)\n","encoder.adapt(train_dataset.map(lambda text, label: text))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s5tP4VcSkTvY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277434356,"user_tz":360,"elapsed":30,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"2fc86c03-0ed5-426e-8230-43cbaebde412"},"source":["vocab = np.array(encoder.get_vocabulary())\n","len(vocab)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1000"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"tBoyjjWg0Ac9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277434356,"user_tz":360,"elapsed":23,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"ec1fbe43-4a53-4711-d99c-66b6d4ebf697"},"source":["vocab = np.array(encoder.get_vocabulary())\n","vocab[:20]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['', '[UNK]', 'the', 'a', 'to', 'of', 'in', 'and', 'on', 'for',\n","       'that', '39s', 'with', 'its', 'as', 'at', 'is', 'said', 'by', 'it'],\n","      dtype='<U14')"]},"metadata":{},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"-rPfbSyoruu3"},"source":["Here are the 20 least frequent words."]},{"cell_type":"code","metadata":{"id":"O6tWoBiwrzyX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277434357,"user_tz":360,"elapsed":19,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"d7df4f7e-e71c-4229-94dc-535126459d19"},"source":["vocab[-20:]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['black', 'turn', 'build', 'countrys', 'advanced', 'whose',\n","       'crisis', 'create', '23', 'sources', 'body', 'militant', 'hope',\n","       'event', 'started', 'ready', 'jones', 'lawsuit', 'focus',\n","       'singapore'], dtype='<U14')"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"mjId5pua3jHQ"},"source":["Once the vocabulary is set, the layer can encode text into indices. The tensors of indices are 0-padded to the longest sequence in the batch (unless you set a fixed `output_sequence_length`):<br>\n","Default Batch Size = 32"]},{"cell_type":"code","metadata":{"id":"RGc7C9WiwRWs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277434553,"user_tz":360,"elapsed":211,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"49ff9828-b247-4114-d638-033dd58e7312"},"source":["encoded_example = encoder(example)[:3].numpy()\n","encoded_example[:]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[  1,  26, 794,   1, 168,  14,   1,   9,  13,   1, 178,   7, 123,\n","          1,   1,  95, 101,   1,   3,   1,   1,   7,   1,   3,  21,   1,\n","        617,   9,   1, 612,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0],\n","       [ 72, 114,   1,   1,  33,   1,  12, 845,   1,  10,   1,  32,   1,\n","          1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0],\n","       [ 35, 133,   1,   1, 258,  12, 577,   8,  43,   8,   3,   1, 405,\n","          5,   1, 677,  15, 796,   2,   1,   1,   4, 762,   1,   1,   7,\n","          1,   2, 939,   5, 601, 273,   1,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","          0,   0,   0,   0,   0,   0,   0,   0]])"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"F5cjz0bS39IN"},"source":["With the default settings, the process is not completely reversible. There are three main reasons for that:\n","\n","1. The default value for `preprocessing.TextVectorization`'s `standardize` argument is `\"lower_and_strip_punctuation\"`.\n","2. The limited vocabulary size and lack of character-based fallback results in some unknown tokens."]},{"cell_type":"code","metadata":{"id":"N_tD0QY5wXaK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277434554,"user_tz":360,"elapsed":7,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"e628513e-da80-4088-e989-a09df4df6309"},"source":["for n in range(3):\n","  print(\"Original: \", example[n].numpy())\n","  print(\"Round-trip: \", \" \".join(vocab[encoded_example[n]]))\n","  print()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original:  b'Nascar will allow liquor companies as sponsors for its Nextel Cup and other stock-car racing next season, ending a 30-year ban and creating a new funding source for racing teams.'\n","Round-trip:  [UNK] will allow [UNK] companies as [UNK] for its [UNK] cup and other [UNK] [UNK] next season [UNK] a [UNK] [UNK] and [UNK] a new [UNK] source for [UNK] teams                              \n","\n","Original:  b'United States cellphone operators are flirting with selling handsets that feature their names exclusively.'\n","Round-trip:  united states [UNK] [UNK] are [UNK] with selling [UNK] that [UNK] their [UNK] [UNK]                                              \n","\n","Original:  b'AP - European negotiators resume talks with Iran on Wednesday on a last-chance offer of incentives aimed at getting the Tehran regime to stop enriching uranium and avoid the threat of possible U.N. sanctions.'\n","Round-trip:  ap european [UNK] [UNK] talks with iran on wednesday on a [UNK] offer of [UNK] aimed at getting the [UNK] [UNK] to stop [UNK] [UNK] and [UNK] the threat of possible un [UNK]                           \n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K9CFbf8s8EMF","executionInfo":{"status":"ok","timestamp":1636277434554,"user_tz":360,"elapsed":5,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"acbabb75-fc06-4ce2-bc41-714b0cad6100"},"source":["len(encoder.get_vocabulary())"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1000"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"bjUqGVBxGw-t"},"source":["## Create the model"]},{"cell_type":"markdown","metadata":{"id":"W7zsmInBOCPO"},"source":["![A drawing of the information flow in the model](https://github.com/tensorflow/docs/blob/master/site/en/tutorials/text/images/bidirectional.png?raw=1)"]},{"cell_type":"markdown","metadata":{"id":"bgs6nnSTGw-t"},"source":["Above is a diagram of the model. \n","\n","1. This model can be build as a `tf.keras.Sequential`.\n","\n","1. The first layer is the `encoder`, which converts the text to a sequence of token indices.\n","\n","2. After the encoder is an embedding layer. An embedding layer stores one vector per word. When called, it converts the sequences of word indices to sequences of vectors. These vectors are trainable. After training (on enough data), words with similar meanings often have similar vectors.\n","\n","  This index-lookup is much more efficient than the equivalent operation of passing a one-hot encoded vector through a `tf.keras.layers.Dense` layer.\n","\n","3. A recurrent neural network (RNN) processes sequence input by iterating through the elements. RNNs pass the outputs from one timestep to their input on the next timestep.\n","\n","  The `tf.keras.layers.Bidirectional` wrapper can also be used with an RNN layer. This propagates the input forward and backwards through the RNN layer and then concatenates the final output. \n","\n","  * The main advantage to a bidirectional RNN is that the signal from the beginning of the input doesn't need to be processed all the way through every timestep to affect the output.  \n","\n","  * The main disadvantage of a bidirectional RNN is that you can't efficiently stream predictions as words are being added to the end.\n","\n","1. After the RNN has converted the sequence to a single vector the two `layers.Dense` do some final processing, and convert from this vector representation to a single logit as the classification output. \n"]},{"cell_type":"markdown","metadata":{"id":"9EODAFUjNaDC"},"source":["<div class=\"alert alert-block alert-info\">\n","    <b>tf.keras.layers.Bidirectional</b><br>\n","    https://www.tensorflow.org/api_docs/python/tf/keras/layers/Bidirectional\n","    </div>"]},{"cell_type":"markdown","metadata":{"id":"-6Qzwsj5QH0S"},"source":["<img src=\"https://github.com/djp840/MSDS_458_Public/blob/master/images/BidirectionalRNN.png?raw=1\">"]},{"cell_type":"code","metadata":{"id":"LwfoBkmRYcP3"},"source":["num_classes = 4\n","model = tf.keras.Sequential([\n","                              encoder\n","                            ,tf.keras.layers.Embedding(input_dim=len(encoder.get_vocabulary()) ,output_dim=128\n","                                # Use masking to handle the variable sequence lengths\n","                              ,mask_zero=True)\n","                              ,tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128))\n","                              ,tf.keras.layers.Dropout(0.3)\n","                              ,tf.keras.layers.Dense(128, activation='relu')\n","                               ,tf.keras.layers.Dropout(0.3)\n","                              ,tf.keras.layers.Dense(num_classes,activation='softmax')   # num_classes = 4\n","])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dfNGE58PNaDD"},"source":["<div class=\"alert alert-block alert-success\"> \n","Please note that we choose to Keras sequential model here since all the layers in the model only have single input and produce single output. </div>"]},{"cell_type":"markdown","metadata":{"id":"KTqE1NQXNaDD"},"source":["<div class=\"alert alert-block alert-info\"> \n","<b>tf.keras.Model</b><br>\n","https://www.tensorflow.org/api_docs/python/tf/keras/Model\n","</div>  "]},{"cell_type":"markdown","metadata":{"id":"RztlbCugEFaI"},"source":["## Compile Model "]},{"cell_type":"markdown","metadata":{"id":"aNazQp3lEDv7"},"source":["<div class=\"alert alert-block alert-info\">\n","<b>tf.keras.losses.SparseCategoricalCrossentropy</b><br>\n","https://www.tensorflow.org/api_docs/python/tf/keras/losses/SparseCategoricalCrossentropy</div>"]},{"cell_type":"code","metadata":{"id":"ZmWbBazIDe_-"},"source":["model.compile(optimizer=tf.keras.optimizers.Adam(1e-4)\n","              ,loss=tf.keras.losses.SparseCategoricalCrossentropy() # if we set from_logits=True we don not have specify a softmax activation function in the last layer\n","              ,metrics=['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"djHsa8wh9Pf9","executionInfo":{"status":"ok","timestamp":1636279463592,"user_tz":360,"elapsed":3,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"674764d4-9aae-4d9b-9bcf-c8294fb8316d"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","text_vectorization (TextVect (None, 60)                0         \n","_________________________________________________________________\n","embedding_5 (Embedding)      (None, 60, 128)           128000    \n","_________________________________________________________________\n","bidirectional_5 (Bidirection (None, 256)               263168    \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 256)               0         \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 128)               32896     \n","_________________________________________________________________\n","dropout_5 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 4)                 516       \n","=================================================================\n","Total params: 424,580\n","Trainable params: 424,580\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"QIGmIGkkouUb"},"source":["Please note that Keras sequential model is used here since all the layers in the model only have single input and produce single output. In case you want to use stateful RNN layer, you might want to build your model with Keras functional API or model subclassing so that you can retrieve and reuse the RNN layer states. Please check [Keras RNN guide](https://www.tensorflow.org/guide/keras/rnn#rnn_state_reuse) for more details."]},{"cell_type":"markdown","metadata":{"id":"kF-PsCk1LwjY"},"source":["The embedding layer [uses masking](../../guide/keras/masking_and_padding) to handle the varying sequence-lengths. All the layers after the `Embedding` support masking:"]},{"cell_type":"code","metadata":{"id":"87a8-CwfKebw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636277512540,"user_tz":360,"elapsed":221,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"643efb33-52d0-42ce-e53e-46c1fc6b376a"},"source":["print([layer.supports_masking for layer in model.layers])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[False, True, True, True, True, True, True]\n"]}]},{"cell_type":"markdown","metadata":{"id":"zIwH3nto596k"},"source":["## Train the model"]},{"cell_type":"markdown","metadata":{"id":"7oHB6X8i0u2H"},"source":["<div class=\"alert alert-block alert-success\">\n","    <b>Module: tf.keras.callbacks</b></div>"]},{"cell_type":"markdown","metadata":{"id":"th1k9Dha0vCl"},"source":["<div class=\"alert alert-block alert-info\">\n","<b>tf.keras.callbacks.EarlyStopping</b><br>\n","https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/EarlyStopping</div>\n","\n","<div class=\"alert alert-block alert-info\">\n","<b>tf.keras.callbacks.ModelCheckpoint</b><br>\n","https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/ModelCheckpoint</div>"]},{"cell_type":"code","metadata":{"id":"hw86wWS4YgR2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636280752929,"user_tz":360,"elapsed":1285630,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"3fb4c7fc-3cbd-45a3-f011-2b6e4f86e77d"},"source":["%%time\n","history = model.fit(train_dataset\n","                    ,epochs = 200\n","                    ,validation_data=validation_dataset\n","                    ,callbacks=[tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=5)]\n","                    )"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","3563/3563 [==============================] - 87s 22ms/step - loss: 0.6161 - accuracy: 0.7672 - val_loss: 0.4450 - val_accuracy: 0.8468\n","Epoch 2/200\n","3563/3563 [==============================] - 75s 21ms/step - loss: 0.4391 - accuracy: 0.8441 - val_loss: 0.4258 - val_accuracy: 0.8517\n","Epoch 3/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.4107 - accuracy: 0.8536 - val_loss: 0.4008 - val_accuracy: 0.8575\n","Epoch 4/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3978 - accuracy: 0.8574 - val_loss: 0.3845 - val_accuracy: 0.8648\n","Epoch 5/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3891 - accuracy: 0.8591 - val_loss: 0.3895 - val_accuracy: 0.8602\n","Epoch 6/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3796 - accuracy: 0.8632 - val_loss: 0.3740 - val_accuracy: 0.8658\n","Epoch 7/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3720 - accuracy: 0.8653 - val_loss: 0.3708 - val_accuracy: 0.8662\n","Epoch 8/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3648 - accuracy: 0.8678 - val_loss: 0.3689 - val_accuracy: 0.8655\n","Epoch 9/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3576 - accuracy: 0.8698 - val_loss: 0.3712 - val_accuracy: 0.8668\n","Epoch 10/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3522 - accuracy: 0.8721 - val_loss: 0.3709 - val_accuracy: 0.8668\n","Epoch 11/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3469 - accuracy: 0.8738 - val_loss: 0.3668 - val_accuracy: 0.8700\n","Epoch 12/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3422 - accuracy: 0.8750 - val_loss: 0.3625 - val_accuracy: 0.8690\n","Epoch 13/200\n","3563/3563 [==============================] - 77s 21ms/step - loss: 0.3373 - accuracy: 0.8767 - val_loss: 0.3665 - val_accuracy: 0.8670\n","Epoch 14/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3332 - accuracy: 0.8784 - val_loss: 0.3638 - val_accuracy: 0.8685\n","Epoch 15/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3290 - accuracy: 0.8801 - val_loss: 0.3670 - val_accuracy: 0.8677\n","Epoch 16/200\n","3563/3563 [==============================] - 76s 21ms/step - loss: 0.3251 - accuracy: 0.8814 - val_loss: 0.3684 - val_accuracy: 0.8677\n","CPU times: user 26min 12s, sys: 4min 26s, total: 30min 39s\n","Wall time: 21min 25s\n"]}]},{"cell_type":"code","metadata":{"id":"BaNbXi43YgUT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636265061845,"user_tz":300,"elapsed":1593,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"1acd068f-1c88-4fe8-8d7d-88aa444501eb"},"source":["test_loss, test_acc = model.evaluate(test_dataset)\n","\n","print('Test Loss: {}'.format(test_loss))\n","print('Test Accuracy: {}'.format(test_acc))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["119/119 [==============================] - 1s 9ms/step - loss: 0.3322 - accuracy: 0.8837\n","Test Loss: 0.3322378098964691\n","Test Accuracy: 0.8836842179298401\n"]}]},{"cell_type":"markdown","metadata":{"id":"OUZyCyI33fPU"},"source":["## Plotting Performance Metrics - Single Layer Bidirectional RNN"]},{"cell_type":"markdown","metadata":{"id":"uFK6utDG3fjX"},"source":["We use Matplotlib to create 2 plots--displaying the training and validation loss (resp. accuracy) for each (training) epoch side by side."]},{"cell_type":"code","metadata":{"id":"HzEOTxsc1JTJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636265061846,"user_tz":300,"elapsed":7,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"6989925a-6d54-4b35-88ed-d5af83329e44"},"source":["history_dict = history.history\n","history_dict.keys()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])"]},"metadata":{},"execution_count":108}]},{"cell_type":"code","metadata":{"id":"2VV8VwoA1Je1","colab":{"base_uri":"https://localhost:8080/","height":331},"executionInfo":{"status":"ok","timestamp":1636265100140,"user_tz":300,"elapsed":38061,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"8cf987d2-52de-42ad-b880-f6fd4b3d3e46"},"source":["history_df=pd.DataFrame(history_dict)\n","history_df.tail(10).round(3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>loss</th>\n","      <th>accuracy</th>\n","      <th>val_loss</th>\n","      <th>val_accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.604</td>\n","      <td>0.783</td>\n","      <td>0.405</td>\n","      <td>0.866</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.371</td>\n","      <td>0.873</td>\n","      <td>0.373</td>\n","      <td>0.877</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.345</td>\n","      <td>0.881</td>\n","      <td>0.366</td>\n","      <td>0.877</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.329</td>\n","      <td>0.886</td>\n","      <td>0.357</td>\n","      <td>0.877</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.313</td>\n","      <td>0.891</td>\n","      <td>0.344</td>\n","      <td>0.882</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.298</td>\n","      <td>0.896</td>\n","      <td>0.339</td>\n","      <td>0.884</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.286</td>\n","      <td>0.900</td>\n","      <td>0.327</td>\n","      <td>0.888</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.275</td>\n","      <td>0.903</td>\n","      <td>0.333</td>\n","      <td>0.883</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.268</td>\n","      <td>0.906</td>\n","      <td>0.331</td>\n","      <td>0.886</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    loss  accuracy  val_loss  val_accuracy\n","0  0.604     0.783     0.405         0.866\n","1  0.371     0.873     0.373         0.877\n","2  0.345     0.881     0.366         0.877\n","3  0.329     0.886     0.357         0.877\n","4  0.313     0.891     0.344         0.882\n","5  0.298     0.896     0.339         0.884\n","6  0.286     0.900     0.327         0.888\n","7  0.275     0.903     0.333         0.883\n","8  0.268     0.906     0.331         0.886"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","metadata":{"id":"NvA2u5do1JqA"},"source":["losses = history.history['loss']\n","accs = history.history['accuracy']\n","val_losses = history.history['val_loss']\n","val_accs = history.history['val_accuracy']\n","epochs = len(losses)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JGoRjq2T1SUp","scrolled":true,"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1636265100507,"user_tz":300,"elapsed":371,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"608fa2be-dd43-4a9a-9d9d-a14366a4a586"},"source":["plt.figure(figsize=(16, 4))\n","for i, metrics in enumerate(zip([losses, accs], [val_losses, val_accs], ['Loss', 'Accuracy'])):\n","    plt.subplot(1, 2, i + 1)\n","    plt.plot(range(epochs), metrics[0], label='Training {}'.format(metrics[2]))\n","    plt.plot(range(epochs), metrics[1], label='Validation {}'.format(metrics[2]))\n","    plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"bawulBahPZQq"},"source":["## Model Architecture Summary Single Layer Bidirectional RNN"]},{"cell_type":"code","metadata":{"id":"KVd7MMCoOjMp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636265738489,"user_tz":300,"elapsed":5,"user":{"displayName":"Husein Adenwala","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjtDMenN1E-yXzFgeGF9pO--NzwEw2pzDT7DhuRcQ=s64","userId":"04312473620162275929"}},"outputId":"ff81664b-51b6-40af-9f75-028fda5beecd"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","text_vectorization_2 (TextVe (None, 40)                0         \n","_________________________________________________________________\n","embedding_7 (Embedding)      (None, 40, 64)            192000    \n","_________________________________________________________________\n","bidirectional_7 (Bidirection (None, 128)               66048     \n","_________________________________________________________________\n","dense_14 (Dense)             (None, 64)                8256      \n","_________________________________________________________________\n","dense_15 (Dense)             (None, 4)                 260       \n","=================================================================\n","Total params: 266,564\n","Trainable params: 266,564\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"2o0oUFPAOjht"},"source":["keras.utils.plot_model(model, \"BiDirectionalLSTM.png\", show_shapes=True)"],"execution_count":null,"outputs":[]}]}